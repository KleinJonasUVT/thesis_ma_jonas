# Service that connects port of pod to webapp
apiVersion: v1
kind: Service
metadata:
  name: coursecatalogue-web
spec:
  selector:
    app: coursecatalogue  # This should match the label of your Flask app pod
  ports:
    - protocol: TCP
      port: 80       # Port accessible outside the pod
      targetPort: 80  # Port your Flask app is listening on inside the pod
  type: NodePort
---
# Creat ingress class (formality)
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
# Create ingress that maps domainname to correct service
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coursecatalogue-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod-issuer
spec:
  ingressClassName: nginx
  rules:
    - host: coursecatalogue.tilburgai.nl
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: coursecatalogue-web
                port:
                  number: 80
  tls:
  - hosts:
    - coursecatalogue.tilburgai.nl
    secretName: letsencrypt-prod-cert
---
# Loadbalancer that behaves as a reverse proxy
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 443
      targetPort: 443
      name: https